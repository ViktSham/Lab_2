# -*- coding: utf-8 -*-
"""Lab_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cPSTO3orlh_RcgovAKM02BYAxtVlJNZS
"""

import numpy as np
import pandas as pd
from PIL import Image
import math

import torch 
precision = 'fp32'
ssd_model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_ssd', model_math=precision)

pip install numpy scipy scikit-image matplotlib

utils = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_ssd_processing_utils')

ssd_model.to('cuda')
ssd_model.eval()

import glob

image_list = glob.glob('/content/drive/My Drive/Colab Notebooks/VisDrone2019-DET-val/images/*.jpg')

inputs = [utils.prepare_input(uri) for uri in image_list]
tensor = utils.prepare_tensor(inputs, precision == 'fp16')

with torch.no_grad():
    detections_batch = ssd_model(tensor)

results_per_input = utils.decode_results(detections_batch)
best_results_per_input = [utils.pick_best(results, 0.0) for results in results_per_input]

best_results_per_input[0]

classes_to_labels = utils.get_coco_object_dictionary()

from matplotlib import pyplot as plt
import matplotlib.patches as patches

for image_idx in range(2,8):
    fig, ax = plt.subplots(1)
    # Show original, denormalized image...
    image = inputs[image_idx] / 2 + 0.5
    ax.imshow(image)
    # ...with detections
    bboxes, classes, confidences = best_results_per_input[image_idx]
    for idx in range(len(bboxes)):
        left, bot, right, top = bboxes[idx]
        x, y, w, h = [val * 300 for val in [left, bot, right - left, top - bot]]
        rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='r', facecolor='none')
        ax.add_patch(rect)
        ax.text(x, y, "{} {:.0f}%".format(classes_to_labels[classes[idx] - 1], confidences[idx]*100), bbox=dict(facecolor='white', alpha=0.5))
plt.show()

annotation_list = glob.glob('/content/drive/My Drive/Colab Notebooks/VisDrone2019-DET-val/annotations/*.txt')

annotation = []
for i in annotation_list:
  annotation.append(np.genfromtxt(i, delimiter = ',', dtype = np.float))

import os
name_ann = '/content/drive/My Drive/Colab Notebooks/VisDrone2019-DET-val/annotations/'
name_annot = os.listdir(name_ann)

name_im = '/content/drive/My Drive/Colab Notebooks/VisDrone2019-DET-val/images/'
name_image = os.listdir(name_im)

cols = ['bbox_left', 'bbox_top', 'bbox_width', 'bbox_height', 'score', 'classes', 'truncation', 'occlusion']
def parcing(name_annot, annotation):
  dat_ann = pd.DataFrame()
  for i in range(len(annotation)):
    dat_ann_i = pd.DataFrame(np.matrix(annotation[i]))
    dat_ann_i['name_annotation'] = np.full(len(np.matrix(annotation[i])) , name_annot[i][0:-4])
    dat_ann = dat_ann.append(dat_ann_i, ignore_index = True)
  dat_ann[cols] = dat_ann[[0, 1, 2, 3, 4, 5, 6, 7]]
  dat_ann = dat_ann.drop([0, 1, 2, 3, 4, 5, 6, 7], axis = 1)
  return dat_ann

data_annotation = parcing(name_annot, annotation)
data_annotation



def parcing_train(name_image, annotation):
  dat_ann_train = pd.DataFrame()
  for i in range(len(annotation)):
    dat_ann_i = pd.DataFrame(annotation[i][0])
    left = dat_ann_i[0]
    bot = dat_ann_i[1]
    right = dat_ann_i[2]
    top = dat_ann_i[3]
    dat_ann_i[0], dat_ann_i[1], dat_ann_i[2], dat_ann_i[3] = [val * 300 for val in [left, bot, right - left, top - bot]]
    for j in range(len(dat_ann_i)):
      dat_ann_i['name_image'] = name_image[i][0:-4]
    dat_ann_i['classes'] = pd.DataFrame(np.row_stack(annotation[i][1]))
    dat_ann_i['confidence'] = pd.DataFrame(np.row_stack(annotation[i][2]))
    dat_ann_train = dat_ann_train.append(dat_ann_i, ignore_index = True)
  dat_ann_train[cols[0:4]] = dat_ann_train[[0, 1, 2, 3]]
  dat_ann_train = dat_ann_train.drop([0, 1, 2, 3], axis = 1)
  return dat_ann_train



data_annotation_train = parcing_train(name_image, best_results_per_input)
data_annotation_train

image_width = []
image_height = []

for i in range(len(image_list)):
  im = Image.open(image_list[i])
  width, height = im.size
  image_width.append(width)
  image_height.append(height)

coef_compr = []
for i in range(len(image_height)):
  coef_compr.append(300 / image_height[i])

data1 = pd.DataFrame({"name_annotation": pd.Series(name_image),
                      "width": pd.Series(image_width),
                      "height": pd.Series(image_height),
                      "coef_compression": pd.Series(coef_compr)})

for i in range(len(image_height)):
  data1.name_annotation[i] = data1.name_annotation[i][0:-4]

data_annotation = data_annotation.merge(data1, how = 'left', left_on = 'name_annotation', right_on = 'name_annotation')
data_annotation

columns = ['bbox_left', 'bbox_top', 'bbox_width', 'bbox_height', 'width', 'height']
for feature in columns:
  data_annotation[feature] = data_annotation[feature] * data_annotation['coef_compression'] 
data_annotation

data_annotation['bbox_right'] = data_annotation['bbox_left'] + data_annotation['bbox_width']
data_annotation['center'] = data_annotation['width'] / 2

data_annotation['new_left_border'] = data_annotation['center'] - 150
data_annotation['new_right_border'] = data_annotation['center'] + 150

data_annotation

data_annotation_vyb = data_annotation[(data_annotation['bbox_left'] >= data_annotation['new_left_border']) \
                                      & (data_annotation['bbox_left'] < data_annotation['new_right_border']) \
                                      & (data_annotation['bbox_right'] <= data_annotation['new_right_border']) \
                                      & (data_annotation['bbox_right'] > data_annotation['new_left_border'])]
data_annotation_vyb

columns1 = ['bbox_left', 'bbox_right', 'center', 'new_right_border', 'new_left_border']
for feature in columns1:
  data_annotation_vyb[feature] = data_annotation_vyb[feature] - data_annotation_vyb['new_left_border'] 
data_annotation_vyb

data_annotation_vyb_1 = pd.DataFrame()
data_annotation_vyb_1 = data_annotation_vyb[['name_annotation', 'bbox_left', 'bbox_top', 'bbox_width', 'bbox_height', 'classes']]
data_annotation_vyb_1.head(3)

data_annotation_train_1 = pd.DataFrame()
data_annotation_train_1 = data_annotation_train[['name_image', 'bbox_left', 'bbox_top', 'bbox_width', 'bbox_height', 'classes']]
data_annotation_train_1

#classes of COCO
classes = pd.DataFrame(classes_to_labels, columns = ['class'])
classes

#our classes
for i in range(data_annotation_vyb_1.shape[0]):
  if(data_annotation_vyb_1.classes.iloc[i] == 0):
    data_annotation_vyb_1.classes.iloc[i] = 'ignored_region' 
  if(data_annotation_vyb_1.classes.iloc[i] in np.array([5, 7, 8, 10])):
    data_annotation_vyb_1.classes.iloc[i] = 'other_vehicle'
  if(data_annotation_vyb_1.classes.iloc[i] in np.array([1, 2])):
    data_annotation_vyb_1.classes.iloc[i] = 'people'
  if(data_annotation_vyb_1.classes.iloc[i] == 3):
    data_annotation_vyb_1.classes.iloc[i] = 'bicycle' 
  if(data_annotation_vyb_1.classes.iloc[i] == 6):
    data_annotation_vyb_1.classes.iloc[i] = 'truck'
  if(data_annotation_vyb_1.classes.iloc[i] == 9):
    data_annotation_vyb_1.classes.iloc[i] = 'bus'
  if(data_annotation_vyb_1.classes.iloc[i] == 4):
    data_annotation_vyb_1.classes.iloc[i] = 'сar'
  if(data_annotation_vyb_1.classes.iloc[i] == 11):
    data_annotation_vyb_1.classes.iloc[i] = 'other_1'

#COCO classes
mas = np.concatenate((np.array([4, 5, 7]), np.array(range(9, 81))), axis = 0)

for i in range(data_annotation_train_1.shape[0]):
  if(data_annotation_train_1.classes.iloc[i] in mas):
    data_annotation_train_1.classes.iloc[i] = 'other'
  if(data_annotation_train_1.classes.iloc[i] == 1):
    data_annotation_train_1.classes.iloc[i] = 'people'
  if(data_annotation_train_1.classes.iloc[i] == 2):
    data_annotation_train_1.classes.iloc[i] = 'bicycle'
  if(data_annotation_train_1.classes.iloc[i] == 8):
    data_annotation_train_1.classes.iloc[i] = 'truck'
  if(data_annotation_train_1.classes.iloc[i] == 6):
    data_annotation_train_1.classes.iloc[i] = 'bus'
  if(data_annotation_train_1.classes.iloc[i] == 3):
    data_annotation_train_1.classes.iloc[i] = 'сar'

data_annotation_train_del = data_annotation_train_1[data_annotation_train_1['classes'] != 'other']
data_annotation_vyb_del = data_annotation_vyb_1[(data_annotation_vyb_1['classes'] != 'ignored_region')  
                                                & (data_annotation_vyb_1['classes'] != 'other_vehicle')
                                                & (data_annotation_vyb_1['classes'] != 'other_1')]

def max_in_list(lst): 
  assert lst
  m = lst[0]
  for i in lst:
    if i > m:
      m = i
  return m

def IoU(train, val):
  bbox_val = val.loc[:,('name_annotation','bbox_left','bbox_top','bbox_width','bbox_height','classes')]
  bbox_train = train.loc[:,('name_image', 'bbox_left','bbox_top','bbox_width','bbox_height','classes')]
  return_data = pd.DataFrame()
  return_1 = []
  return_2 = []
  for i in range(bbox_train.shape[0]):
    x_train = bbox_train.iloc[i,1]
    y_train = bbox_train.iloc[i,1]
    x_val = []
    y_val = []
    indx_val = []
    distinct = []
    peresec = []
    name_train = bbox_train.iloc[i,0]
    for j in range(bbox_val.shape[0]):
      name_val = bbox_val.iloc[j,0]
      if (name_train == name_val):
        width_train = bbox_train.iloc[i,3]
        height_train = bbox_train.iloc[i,4]

        width_val = bbox_val.iloc[j,3]
        height_val = bbox_val.iloc[j,4]

        x1_val = bbox_val.iloc[j,1]
        x2_val = bbox_val.iloc[j,1] + width_val
          
        y1_val = bbox_val.iloc[j,2]
        y2_val = bbox_val.iloc[j,2] - height_val
        
        x1_train = bbox_train.iloc[i,1]
        x2_train = bbox_train.iloc[i,1] + width_train
        
        y1_train = bbox_train.iloc[i,2]
        y2_train = bbox_train.iloc[i,2] - height_train
        
        xA = max(x1_train, x1_val)
        yA = max(y2_train, y2_val)
        xB = min(x2_train, x2_val)
        yB = min(y1_train, y1_val)
          
        w_p = xB - xA
        h_p = yB - yA

        if(w_p > 0):
          if(h_p > 0):
            interArea = w_p * h_p
          else:
            interArea = 0
        else:
          interArea = 0
        boxAArea = width_train * height_train
        boxBArea = height_val * width_val

        iou = interArea / float(boxAArea + boxBArea - interArea)
        indx_val.append(j)
        peresec.append(iou)
    
    if(peresec): 
      max_iou = max_in_list(peresec)
      for q in range(len(peresec)):
        if(peresec[q] == max_iou):
          index = indx_val[q]
          max_class = bbox_val.iloc[index, 5]
    else:
      peresec.append(0)
      max_iou = 0
      max_class = 'nothing'
    
    return_1.append(max_iou)
    return_2.append(max_class)

    print(i, ':', max_iou)
    print(max_class)
    print(bbox_train.iloc[i, 5])
    print('---------')
  return_data['iou'] = pd.Series(return_1)
  return_data['class_det'] = pd.Series(return_2)
  return return_data

IOU = IoU(data_annotation_train_del, data_annotation_vyb_del)

data_annotation_train_it = pd.DataFrame()
data_annotation_train_it = data_annotation_train_del.copy().reset_index()
data_annotation_train_it['IoU'] = IOU['iou']
data_annotation_train_it['classes_det'] = IOU['class_det']
data_annotation_train_it

IOU[IOU['iou'] >= 0.5].shape[0]

data_annotation_train_it.to_csv('/content/drive/My Drive/Colab Notebooks/data_annotation_train_it.csv', index = False, header = True)
data_annotation_vyb_1.to_csv('/content/drive/My Drive/Colab Notebooks/data_annotation_vyb_1.csv', index = False, header = True)
data_annotation_vyb_del.to_csv('/content/drive/My Drive/Colab Notebooks/data_annotation_vyb_del.csv', index = False, header = True)
data_annotation_train_del.to_csv('/content/drive/My Drive/Colab Notebooks/data_annotation_train_del.csv', index = False, header = True)
data_annotation_train_1.to_csv('/content/drive/My Drive/Colab Notebooks/data_annotation_train_1.csv', index = False, header = True)

data_annotation_train_it.loc[data_annotation_train_it['classes'] == data_annotation_train_it['classes_det'], 'correctly'] = 1
data_annotation_train_it.loc[data_annotation_train_it['classes'] != data_annotation_train_it['classes_det'], 'correctly'] = 0
data_annotation_train_it.head()

data_0_5 = data_annotation_train_it[data_annotation_train_it['IoU'] > 0.5]
data_0_75 = data_annotation_train_it[data_annotation_train_it['IoU'] > 0.75]
data_0_9 = data_annotation_train_it[data_annotation_train_it['IoU'] > 0.9]

def false_lose(data, dataset):
  falset = dataset.shape[0] - data[data['correctly'] == 1].shape[0]
  return falset

false_0_5 = false_lose(data_0_5, data_annotation_train_del)
false_0_75 = false_lose(data_0_75, data_annotation_train_del) 
false_0_9 = false_lose(data_0_9, data_annotation_train_del) 
false = pd.DataFrame([false_0_5, false_0_75, false_0_9], columns = ['false'], index = [0.5, 0.75, 0.9])
false

lose_0_5 = false_lose(data_0_5, data_annotation_vyb_del)
lose_0_75 = false_lose(data_0_75, data_annotation_vyb_del) 
lose_0_9 = false_lose(data_0_9, data_annotation_vyb_del) 
lose = pd.DataFrame([lose_0_5, lose_0_75, lose_0_9], columns = ['losses'], index = [0.5, 0.75, 0.9])
lose

def accur(data):
  if (data.shape[0] == 0):
    return 0
  else:
    return data[data['correctly'] == 1].shape[0] * 100 / data.shape[0]

accur_0_5 = accur(data_0_5)
accur_0_75 = accur(data_0_75)
accur_0_9 = accur(data_0_9)
accur = pd.DataFrame([accur_0_5, accur_0_75, accur_0_9], columns = ['accurancy,%'], index = [0.5, 0.75, 0.9])
accur

task_4 = pd.concat([accur, lose, false], axis = 1)
task_4

data_5_people = data_0_5[data_0_5.classes_det == 'people'].reset_index()
data_5_bicycle = data_0_5[data_0_5.classes_det == 'bicycle'].reset_index()
data_5_car = data_0_5[data_0_5.classes_det == 'car'].reset_index()
data_5_bus = data_0_5[data_0_5.classes_det == 'bus'].reset_index()
data_5_truck = data_0_5[data_0_5.classes_det == 'truck'].reset_index()

data_75_bicycle = pd.DataFrame()
data_75_bicycle = data_75_bicycle.append(data_0_75[data_0_75.classes_det == 'bicycle']).reset_index()
data_75_people = data_0_75[data_0_75.classes_det == 'people'].reset_index()
data_75_car = data_0_75[data_0_75.classes_det == 'car'].reset_index()
data_75_bus = data_0_75[data_0_75.classes_det == 'bus'].reset_index()
data_75_truck = data_0_75[data_0_75.classes_det == 'truck'].reset_index()

data_9_bicycle = pd.DataFrame()
data_9_bicycle = data_9_bicycle.append(data_0_9[data_0_9.classes_det == 'bicycle']).reset_index()
data_9_people = data_0_9[data_0_9.classes_det == 'people'].reset_index()
data_9_car = data_0_9[data_0_9.classes_det == 'car'].reset_index()
data_9_bus = data_0_9[data_0_9.classes_det == 'bus'].reset_index()
data_9_truck = data_0_9[data_0_9.classes_det == 'truck'].reset_index()

tr_people = data_annotation_train_it[data_annotation_train_it['classes_det'] == 'people'].reset_index()
tr_bicycle = data_annotation_train_it[data_annotation_train_it['classes_det'] == 'bicycle'].reset_index()
tr_car = data_annotation_train_it[data_annotation_train_it['classes_det'] == 'car'].reset_index()
tr_bus = data_annotation_train_it[data_annotation_train_it['classes_det'] == 'bus'].reset_index()
tr_truck = data_annotation_train_it[data_annotation_train_it['classes_det'] == 'truck'].reset_index()

vyb_people = data_annotation_vyb_del[data_annotation_vyb_del['classes'] == 'people'].reset_index()
vyb_bicycle = data_annotation_vyb_del[data_annotation_vyb_del['classes'] == 'bicycle'].reset_index()
vyb_car = data_annotation_vyb_del[data_annotation_vyb_del['classes'] == 'car'].reset_index()
vyb_bus = data_annotation_vyb_del[data_annotation_vyb_del['classes'] == 'bus'].reset_index()
vyb_truck = data_annotation_vyb_del[data_annotation_vyb_del['classes'] == 'truck'].reset_index()

lose_5_people = false_lose(data_5_people, vyb_people)
lose_75_people = false_lose(data_75_people, vyb_people) 
lose_9_people = false_lose(data_9_people, vyb_people) 
lose_5_bicycle = false_lose(data_5_bicycle, vyb_bicycle)
lose_75_bicycle = false_lose(data_75_bicycle, vyb_bicycle) 
lose_9_bicycle = false_lose(data_9_bicycle, vyb_bicycle) 
lose_5_car = false_lose(data_5_car, vyb_car)
lose_75_car = false_lose(data_75_car, vyb_car) 
lose_9_car = false_lose(data_9_car, vyb_car) 
lose_5_bus = false_lose(data_5_bus, vyb_bus)
lose_75_bus = false_lose(data_75_bus, vyb_bus) 
lose_9_bus = false_lose(data_9_bus, vyb_bus) 
lose_5_truck = false_lose(data_5_truck, vyb_truck)
lose_75_truck = false_lose(data_75_truck, vyb_truck) 
lose_9_truck = false_lose(data_9_truck, vyb_truck) 

lose_cl = pd.DataFrame([lose_5_people, lose_75_people, lose_9_people, lose_5_bicycle, lose_75_bicycle, 
                        lose_9_bicycle, lose_5_car, lose_75_car, lose_9_car, lose_5_bus, 
                        lose_75_bus, lose_9_bus, lose_5_truck, lose_75_truck, lose_9_truck,], 
                       columns = ['losses'], index = ['0.5', '0.75', '0.9', '0.5', '0.75', '0.9', '0.5', '0.75', '0.9', 
                                                      '0.5', '0.75', '0.9', '0.5', '0.75', '0.9'])
lose_cl

false_5_people = false_lose(data_5_people, tr_people)
false_75_people = false_lose(data_75_people, tr_people) 
false_9_people = false_lose(data_9_people, tr_people) 
false_5_bicycle = false_lose(data_5_bicycle, tr_bicycle)
false_75_bicycle = false_lose(data_75_bicycle, tr_bicycle) 
false_9_bicycle = false_lose(data_9_bicycle, tr_bicycle) 
false_5_car = false_lose(data_5_car, tr_car)
false_75_car = false_lose(data_75_car, tr_car) 
false_9_car = false_lose(data_9_car, tr_car) 
false_5_bus = false_lose(data_5_bus, tr_bus)
false_75_bus = false_lose(data_75_bus, tr_bus) 
false_9_bus = false_lose(data_9_bus, tr_bus) 
false_5_truck = false_lose(data_5_truck, tr_truck)
false_75_truck = false_lose(data_75_truck, tr_truck) 
false_9_truck = false_lose(data_9_truck, tr_truck) 

false_cl = pd.DataFrame([false_5_people, false_75_people, false_9_people, false_5_bicycle, false_75_bicycle, 
                        false_9_bicycle, false_5_car, false_75_car, false_9_car, false_5_bus, 
                        false_75_bus, false_9_bus, false_5_truck, false_75_truck, false_9_truck,], 
                       columns = ['false'], index = ['0.5', '0.75', '0.9', '0.5', '0.75', '0.9', '0.5', '0.75', '0.9', 
                                                      '0.5', '0.75', '0.9', '0.5', '0.75', '0.9'])
false_cl

def accur(data, dataset):
  if (dataset.shape[0] == 0):
    return 0
  else:
    return data[data['correctly'] == 1].shape[0] * 100 / dataset.shape[0]

accur_5_people = accur(data_5_people, tr_people)
accur_5_bicycle = accur(data_5_bicycle, tr_bicycle)
accur_5_car = accur(data_5_car, tr_car)
accur_5_bus = accur(data_5_bus, tr_bus)
accur_5_truck = accur(data_5_truck, tr_truck)
accur_75_people = accur(data_75_people, tr_people)
accur_75_bicycle = accur(data_75_bicycle, tr_bicycle)
accur_75_car = accur(data_75_car, tr_car)
accur_75_bus = accur(data_75_bus, tr_bus)
accur_75_truck = accur(data_75_truck, tr_truck)
accur_9_people = accur(data_9_people, tr_people)
accur_9_bicycle = accur(data_9_bicycle, tr_bicycle)
accur_9_car = accur(data_9_car, tr_car)
accur_9_bus = accur(data_9_bus, tr_bus)
accur_9_truck = accur(data_9_truck, tr_truck)

accur_cl = pd.DataFrame([accur_5_people, accur_75_people, accur_9_people, accur_5_bicycle, accur_75_bicycle, 
                        accur_9_bicycle, accur_5_car, accur_75_car, accur_9_car, accur_5_bus, 
                        accur_75_bus, accur_9_bus, accur_5_truck, accur_75_truck, accur_9_truck,], 
                       columns = ['accurancy,%'], index = ['0.5', '0.75', '0.9', '0.5', '0.75', '0.9', '0.5', '0.75', '0.9', 
                                                      '0.5', '0.75', '0.9', '0.5', '0.75', '0.9'])
accur_cl

task_5 = pd.concat([accur_cl, lose_cl, false_cl], axis = 1)
task_5['class'] = ['people', 'people', 'people', 'bicycle', 'bicycle', 'bicycle', 'car', 'car', 'car', 'bus', 'bus', 
                   'bus', 'truck', 'truck', 'truck']
task_5

for image_idx in np.arange(6,13,1):
    fig, ax = plt.subplots(1)
    image = inputs[image_idx] / 2 + 0.5
    ax.imshow(image)
    bboxes, classes, confidences = best_results_per_input[image_idx]
    for idx in range(len(bboxes)):
        x = bboxes[idx][0]
        y = bboxes[idx][1]
        w = bboxes[idx][2]
        h = bboxes[idx][3]
        rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='r', facecolor='none')
        ax.add_patch(rect)
    box = pd.DataFrame()
    name = name_image[image_idx][0:-4]
    print(name)
    box = data_annotation_vyb_1.loc[data_annotation_vyb_1.name_annotation == name]
    for idx in range(len(box)):
        x1 = box.bbox_left.iloc[idx]
        x2 = box.bbox_top.iloc[idx]
        x3 = box.bbox_width.iloc[idx]
        x4 = box.bbox_height.iloc[idx]
        rect1 = patches.Rectangle((x1, x2), x3, x4, linewidth=1, edgecolor='blue', facecolor='none')
        ax.add_patch(rect1)
plt.show()





